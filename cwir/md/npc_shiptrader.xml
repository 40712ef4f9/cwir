<?xml version="1.0" encoding="utf-8" ?>
<diff>  
	<add sel="/mdscript[@name='NPC_Shiptrader']/cues/cue[@name='Base']/cues/cue[@name='SectionHandler']/actions/do_elseif[@value=&quot;event.param == 'cArch_sellshipconfirmed'&quot;]" pos="before">
		<do_elseif value="(event.param == 'cArch_sellshipconfirmed') and ($actor.owner == faction.player)">
			<add_conversation_view view="facenormal" />
			<set_value name="$playsoldship" exact="$soldshipprice * 460/4Cr" />
			<reward_player money="$playsoldship"/>

			<do_if value="typeof $soldship == datatype.list">

				<do_all exact="$soldship.count" counter="$i">
					<set_value name="$soldship2" exact="$soldship.{$i}"/>
					<include_actions ref="SellShipActions" />
				</do_all>

			</do_if>
			<do_else>
				<set_value name="$soldship2" exact="$soldship"/>
				<include_actions ref="SellShipActions" />
			</do_else>

		</do_elseif>
	</add>		

	<replace sel="/mdscript[@name='NPC_Shiptrader']/cues/cue[@name='Base']/cues/cue[@name='BuildFinished']">
		<cue name="BuildFinished" instantiate="true">
			<conditions>
				<check_any>
					<event_build_finished object="$actor.container" />
					<event_cue_signalled />
				</check_any>
				<check_value value="$BuildModule? and $ship? and event.param == $BuildModule and event.param.dockslot.component.docked.indexof.{$ship}"/>
			</conditions>
			<actions>
				<debug_text text="'Build-finished conversation with architect started: %1, actor=%2, %3'.[event.param, event.object, event.object.name]" />
				<substitute_text text="this.$logtext" source="{1016,51}">
					<replace string="'$SHIP$'" with="$ship.name" />
					<replace string="'$SECTOR$'" with="$ship.sector.name" />
				</substitute_text>
				<write_to_logbook category="upkeep" text="this.$logtext" />

				<!--<find_station name="$PlayerHaveShipyards" multiple="false" space="player.galaxy" owner="faction.player">
					<match_content class="class.buildmodule" />		
				</find_station>-->

				<do_if value="not $upgrade? and not $component? and $actor.container.owner == $ship.owner"> 
					<set_value name="$cwirplayer_faction" exact="$ship.owner" /> 
					<find_dock_location name="$target_dock"  container="$ship" size="tag.dock_p" /> 
					<do_if value="$ship.isclass.[class.ship_xl, class.ship_l]"> 
						<create_platform_actor name="$cwircommander" dockingbay="$target_dock.component" group="br.commander" type="entitytype.commander"> 
							<owner exact="$cwirplayer_faction"/> 
							<skills> 
								<skill type="combat" min="1" max="5"/> 
								<skill type="engineering" min="1" max="5"/> 
								<skill type="leadership" min="3" max="5"/> 
								<skill type="management" min="1" max="5"/> 
								<skill type="morale" min="3" max="5"/> 
								<skill type="navigation" min="3" max="5"/> 
								<skill type="science" min="1" max="5"/> 
							</skills> 
						</create_platform_actor> 
					</do_if> 
					<do_else> 
						<create_platform_actor name="$cwircommander" dockingbay="$target_dock.component" group="br.commander" type="entitytype.pilot"> 
							<owner exact="$cwirplayer_faction"/> 
							<skills> 
								<skill type="combat" min="3" max="5"/> 
								<skill type="engineering" min="1" max="5"/> 
								<skill type="leadership" min="3" max="5"/> 
								<skill type="management" min="1" max="5"/> 
								<skill type="morale" min="3" max="5"/> 
								<skill type="navigation" min="3" max="5"/> 
								<skill type="science" min="1" max="5"/> 
							</skills> 
						</create_platform_actor> 
					</do_else> 
					<assign_control_entity object="$ship" actor="$cwircommander"/> 
					<do_if value="$ship.isclass.[class.ship_xl, class.ship_l]"> 
						<!-- Engineer --> 
						<create_platform_actor name="$cwirengineer" dockingbay="$target_dock.component" group="br.engineer" type="entitytype.engineer"> 
							<owner exact="$cwirplayer_faction"/> 
							<skills> 
								<skill type="combat" min="1" max="5"/> 
								<skill type="engineering" min="3" max="5"/> 
								<skill type="leadership" min="1" max="5"/> 
								<skill type="management" min="1" max="5"/> 
								<skill type="morale" min="1" max="5"/> 
								<skill type="navigation" min="1" max="5"/> 
								<skill type="science" min="1" max="5"/> 
							</skills> 
						</create_platform_actor> 
						<assign_engineer object="$ship" actor="$cwirengineer" /> 
						<start_script object="$cwirengineer" name="'engineer.ai'"/> 
						<!-- Defense argon.defence --> 
						<create_platform_actor name="$cwirdefence" dockingbay="$target_dock.component" group="br.defence" type="entitytype.defencecontrol"> 
							<owner exact="$cwirplayer_faction"/> 
							<skills> 
								<skill type="combat" min="3" max="5"/> 
								<skill type="engineering" min="1" max="5"/> 
								<skill type="leadership" min="3" max="5"/> 
								<skill type="management" min="1" max="5"/> 
								<skill type="morale" min="3" max="5"/> 
								<skill type="navigation" min="1" max="5"/> 
								<skill type="science" min="1" max="5"/> 
							</skills> 
						</create_platform_actor> 
						<assign_defence_manager object="$ship" actor="$cwirdefence" /> 
						<start_script object="$cwirdefence" name="'fight.defend.capital'"/> 
					</do_if> 
					<!-- Platform Architect --> 
					<!--<check_object result="$isbuildership" object="$ship"> 
					  <match_content class="class.buildmodule" min="1"/> 
				   </check_object> 
				   <do_if value="$isbuildership"> 
					  <create_platform_actor name="$cwirarchitect" dockingbay="$target_dock.component" group="br.architect" type="entitytype.architect"> 
						 <owner exact="$cwirplayer_faction"/> 
						 <skills> 
							<skill type="combat" min="1" max="5"/> 
							<skill type="engineering" min="3" max="5"/> 
							<skill type="leadership" min="1" max="5"/> 
							<skill type="management" min="3" max="5"/> 
							<skill type="morale" min="1" max="5"/> 
							<skill type="navigation" min="3" max="5"/> 
							<skill type="science" min="1" max="5"/> 
						 </skills> 
					  </create_platform_actor> 
					  <assign_architect actor="$cwirarchitect" object="$ship"/> 
					  <remove_value name="$cwirarchitect"/> 
				   </do_if> -->

					<remove_value name="$cwirplayer_faction"/> 
					<remove_value name="$cwircommander"/> 
					<remove_value name="$cwirengineer"/> 
					<remove_value name="$shipdefence"/> 
					<remove_value name="$isbuildership"/> 
					<create_ai_unit object="$ship" /> 
					<do_if value="$droneplan"> 
						<do_all exact="$droneplan.count" counter="$i"> 
							<add_ammo object="$ship" macro="macro.{$droneplan.{$i}.{1}}" amount="$droneplan.{$i}.{2}" /> 
						</do_all> 
					</do_if> 
					<!-- give the ship some fuel so it can jump --> 
					<add_cargo ware="ware.fuelcells" object="$ship" exact="500" result="$fuel" /> 
					<do_if value="$fuel gt 0"> 
						<remove_cargo ware="ware.fuelcells" object="$actor.container" exact="$fuel" /> 
					</do_if> 
					<remove_value name="$fuel"/> 
					<do_if value="$ship.commander != player.primaryship and $ship.isplayerowned"> 
						<set_object_commander object="$ship" commander="player.primaryship" /> 
					</do_if> 
				</do_if> 

				<do_elseif value="not $upgrade? and not $component? and $actor.container.owner != $ship.owner">
					<!-- TODO: Make it a bad pilot -->
					<create_cue_actor cue="this" group="argon.pilot" />
					<find_dock_location name="$target_dock" container="$ship" size="tag.dock_p" />
					<add_actor_to_platform actor="this.actor" dockingbay="$target_dock.component" />
					<set_owner object="this.actor" faction="faction.player" />
					<do_if value="$ship.isclass.ship_l or $ship.isclass.ship_xl">
						<set_entity_type entity="this.actor" type="entitytype.commander" />
					</do_if>
					<do_else>
						<set_entity_type entity="this.actor" type="entitytype.pilot" />
					</do_else>
					<assign_pilot object="$ship" actor="this.actor" />
					<create_ai_unit object="$ship" />
					<do_if value="$droneplan">
						<do_all exact="$droneplan.count" counter="$i">
							<add_ammo object="$ship" macro="macro.{$droneplan.{$i}.{1}}" amount="$droneplan.{$i}.{2}" />
						</do_all>
					</do_if>
					<!-- give the ship some fuel so it can jump -->
					<add_cargo ware="ware.fuelcells" object="$ship" exact="500" result="$fuel" />
					<do_if value="$fuel gt 0">
						<remove_cargo ware="ware.fuelcells" object="$actor.container" exact="$fuel" />
					</do_if>
					<remove_value name="$fuel"/>
					<do_if value="$ship.isplayerowned and $ship.commander != player.primaryship">
						<set_object_commander object="$ship" commander="player.primaryship" />
					</do_if>
				</do_elseif>
				
				<remove_value name="$ship.pilot.$shiptrader_docking" /> 
				<do_if value="$ship.isplayerowned"> 
					<start_script object="$ship.pilot" name="'player.default'"/> 
				</do_if> 
				<do_else> 
					<set_value name="$soldship2" exact="$ship" /> 
					<include_actions ref="SellShipActions_Jobs" /> 
					<remove_value name="$soldship2" /> 
				</do_else> 
				
				<clear_buildmodule buildmodule="$BuildModule" />
				<reset_cue cue="ListenOnShipDestroyed" />
				<do_if value="FixBrokenSetupFromCVs_SignalBuildStarted.isinstance">
					<cancel_cue cue="FixBrokenSetupFromCVs_SignalBuildStarted" />
				</do_if>
				<remove_value name="$buildcost" />
				<remove_cue_actor cue="this" />
				<remove_value name="$upgrade" />
				<remove_value name="$droneplan" />
				<remove_value name="$ammoplan" />
				<remove_value name="$component" />
				<remove_value name="$target_dock"/> 
				<remove_value name="$PlayerHaveShipyards" />
			</actions>
			<cues>
				<cue name="BuiltShipLeft">
					<conditions>
						<check_any>
							<event_object_undocked object="$ship"/>
							<event_object_destroyed object="$ship"/>
						</check_any>
					</conditions>
					<actions>
						<do_if value="event.name == 'event_object_undocked'">
							<start_conversation actor="$actor" conversation="Speak" type="normal" convparam="1115" />
						</do_if>
						<remove_value name="$ship" />
						<remove_value name="$actor.$shiptrader_isbusy" />
					</actions>
				</cue>
			</cues>
		</cue>

	</replace>


	<replace sel="/mdscript[@name='NPC_Shiptrader']/cues/cue[@name='Base']/cues/library[@name='SellShipActions']">
		<library name="SellShipActions">
			<actions>
				<remove_object_commander object="$soldship2" />
				<set_owner object="$soldship2" faction="$actor.owner" />


				<!-- Block all dockslots to prevent the player from docking at this ship -->
				<find_dock_location name="$ship_docks" container="$soldship2" size="tag.dock_p" multiple="true"/>
				<do_all exact="$ship_docks.count" counter="$Count">
					<set_room_locked room="$ship_docks.{$Count}.component" locked="true"/>
				</do_all>
				<remove_value name="$ship_docks" />

				<do_if value="$soldship2.pilot">
					<remove_actor_account actor="$soldship2.pilot" transfer="true" />
					<set_owner object="$soldship2.pilot" faction="$actor.owner" />
					<!-- export code -->
					<include_actions ref="md.NPC_Shiptrader.SellShipActions_Jobs" />

				</do_if>
				<do_else>
					<!-- no pilot, create one -->
					<do_if value="$soldship2.isclass.ship_l or $soldship2.isclass.ship_xl">
						<set_value name="$entitytype" exact="entitytype.commander" />
					</do_if>
					<do_else>
						<set_value name="$entitytype" exact="entitytype.pilot" />
					</do_else>

					<do_if value="$dock? and $soldship2.owner != faction.xenon">
						<create_platform_actor name="$pilot" dockingbay="$dock" type="$entitytype">
							<select faction="$actor.owner" tags="tag.{$entitytype}"/>
							<owner exact="$actor.owner" />
						</create_platform_actor>
					</do_if>
					<do_else>
						<create_cue_actor name="$pilot" cue="this">
							<select faction="$actor.owner" tags="tag.{$entitytype}"/>
							<owner exact="$actor.owner" />
						</create_cue_actor>
						<set_entity_type entity="$pilot" type="$entitytype" />
					</do_else>
					<do_if value="$pilot?">
						<assign_pilot object="$soldship2" actor="$pilot" />
						<do_if value="$pilot.container">
							<!-- export code -->
							<include_actions ref="md.NPC_Shiptrader.SellShipActions_Jobs" />
						</do_if>
						<remove_cue_actor actor="$pilot" cue="this" />
						<remove_value name="$pilot" />
					</do_if>

					<do_else>
						<!-- should not happen, but to prevent exploits -->
						<destroy_object object="$soldship2" />
					</do_else>
					<remove_value name="$entitytype" />
				</do_else>

				<do_if value="$soldship2.engineer">
					<set_owner object="$soldship2.engineer" faction="$actor.owner" />
				</do_if>
				<do_else>
					<!-- no engineer, create one -->
					<do_if value="$soldship2.isclass.ship_l or $soldship2.isclass.ship_xl and $soldship2.owner != faction.player">
						<do_if value="$dock? and $soldship2.owner != faction.xenon">
							<create_platform_actor name="$engineer" dockingbay="$dock" type="entitytype.engineer">
								<select faction="$actor.owner" tags="tag.{entitytype.engineer}"/>
								<owner exact="$actor.owner" />
							</create_platform_actor>
						</do_if>
						<do_else>
							<create_cue_actor name="$engineer" cue="this">
								<select faction="$actor.owner" tags="tag.{entitytype.engineer}"/>
								<owner exact="$actor.owner" />
							</create_cue_actor>
							<set_entity_type entity="$engineer" type="entitytype.engineer" />
						</do_else>
						<do_if value="$engineer?">
							<assign_engineer object="$soldship2" actor="$engineer" />
							<do_if value="$engineer.container">
								<start_script object="$engineer" name="'engineer.ai'" />
							</do_if>

							<remove_cue_actor actor="$engineer" cue="this" />
							<remove_value name="$engineer" />
						</do_if>
					</do_if>
				</do_else>

				<do_if value="$soldship2.defencenpc">
					<set_owner object="$soldship2.defencenpc" faction="$actor.owner" />
				</do_if>
				<do_else>
					<!-- no defencenpc, create one -->
					<do_if value="$soldship2.isclass.ship_l or $soldship2.isclass.ship_xl and $soldship2.owner != faction.player">
						<do_if value="$dock? and $soldship2.owner != faction.xenon">
							<create_platform_actor name="$defencecontrol" dockingbay="$dock" type="entitytype.defencecontrol">
								<select faction="$actor.owner" tags="tag.{entitytype.defencecontrol}"/>
								<owner exact="$actor.owner" />
							</create_platform_actor>
						</do_if>
						<do_else>
							<create_cue_actor name="$defencecontrol" cue="this">
								<select faction="$actor.owner" tags="tag.{entitytype.defencecontrol}"/>
								<owner exact="$actor.owner" />
							</create_cue_actor>
							<set_entity_type entity="$defencecontrol" type="entitytype.defencecontrol" />
						</do_else>
						<do_if value="$defencecontrol?">
							<assign_defence_manager object="$soldship2" actor="$defencecontrol" />
							<do_if value="$defencecontrol.container">
								<start_script object="$defencecontrol" name="'fight.defend.capital'" />
							</do_if>

							<remove_cue_actor actor="$defencecontrol" cue="this" />
							<remove_value name="$defencecontrol" />
						</do_if>
					</do_if>
				</do_else>

				<do_if value="$soldship2.architect">
					<remove_actor_account actor="$soldship2.architect" transfer="true" />
					<set_owner object="$soldship2.architect" faction="$actor.owner" />
				</do_if>
			</actions>
		</library>
	</replace>  
	<add sel="/mdscript[@name='NPC_Shiptrader']/cues/cue[@name='Base']/cues/library[@name='SellShipActions']" pos="after">
		<library name="SellShipActions_Jobs">
			<actions>
				<do_if value="$actor.owner == faction.player">					
					<remove_actor_account actor="$soldship2.pilot" transfer="true" />
					<find_station name="$stations" space="$soldship2.cluster" multiple="true">
						<match owner="faction.player" negate="true"/>
						<match_relation faction="faction.player" comparison="ge" relation="neutral"/>
					</find_station>
					<set_value name="$factions" exact="[]"/>
					<do_all exact="$stations.count" counter="$i">
						<do_if value="not $factions.indexof.{$stations.{$i}.owner}">
							<append_to_list name="$factions" exact="$stations.{$i}.owner"/>
						</do_if>
					</do_all>
					<set_owner object="$soldship2.pilot" faction="$factions.random"/>
					<remove_value name="$stations"/>
					<remove_value name="$factions"/>
					<do_if value="$soldship2.primarypurpose == objectpurpose.build">
						<start_script object="$soldship2.pilot" name="'move.die'" >
							<param name="bysale" value="$actor.container" />
						</start_script>
					</do_if> 
					<do_elseif value="$soldship2.primarypurpose == objectpurpose.mine and $soldship2.availableunits.{unitcategory.orecollector}.count gt 0">
						<start_script object="$soldship2.pilot" name="'mining.ship.free'">
							<param name="basketoverride" value="[ware.ice, ware.ore, ware.silicon, ware.nividium]"/> 
						</start_script>
					</do_elseif>
					<do_elseif value="$soldship2.primarypurpose == objectpurpose.mine and $soldship2.isclass.[class.ship_m, class.ship_s] and $soldship2.availableunits.{unitcategory.orecollector}.count gt 0">
						<start_script object="$soldship2.pilot" name="'mining.ship.free'">
							<param name="basketoverride" value="[ware.ice, ware.ore, ware.silicon, ware.nividium]"/> 
							<param name="range" value="'cluster'"/>
						</start_script>
					</do_elseif>
					<do_elseif value="$soldship2.primarypurpose == objectpurpose.mine and $soldship2.availableunits.{unitcategory.gascollector}.count gt 0">
						<start_script object="$soldship2.pilot" name="'mining.ship.free'">
							<param name="basketoverride" value="[ware.plasma, ware.ions, ware.hydrogen]"/> 
						</start_script>					
					</do_elseif>
					<do_elseif value="$soldship2.primarypurpose == objectpurpose.mine and $soldship2.isclass.[class.ship_m, class.ship_s] and $soldship2.availableunits.{unitcategory.gascollector}.count gt 0">
						<start_script object="$soldship2.pilot" name="'mining.ship.free'">
							<param name="basketoverride" value="[ware.plasma, ware.ions, ware.hydrogen]"/>
							<param name="range" value="'cluster'"/>
						</start_script>	
					</do_elseif>
					<do_elseif value="$soldship2.primarypurpose == objectpurpose.trade">
						<start_script object="$soldship2.pilot" name="'trade.ship.ranged'">
							<param name="minbuy" value="0"/>
							<param name="maxbuy" value="20"/>
							<param name="minsell" value="0"/>
							<param name="maxsell" value="20"/>
						</start_script>
					</do_elseif>
					<do_elseif value="$soldship2.primarypurpose == objectpurpose.trade and $soldship2.isclass.[class.ship_m, class.ship_s]">
						<start_script object="$soldship2.pilot" name="'trade.ship.ranged'">
							<param name="minbuy" value="0"/>
							<param name="maxbuy" value="20"/>
							<param name="minsell" value="0"/>
							<param name="maxsell" value="20"/>
							<param name="range" value="'cluster'"/>
						</start_script>
					</do_elseif>

					<do_elseif value="$soldship2.primarypurpose == objectpurpose.fight">
						<find_ship name="$factionships" space="$soldship2.cluster" owner="$soldship2.owner" primarypurpose="$soldship2.primarypurpose" multiple="true">
							<match_any> 
								<match class="class.ship_xl"/>
								<match class="class.ship_l"/>							
							</match_any>
						</find_ship>
						<do_all exact="$factionships.count" counter="$i">
							<do_if value="$factionships.{$i}.isoperational
									and $soldship2 != $factionships.{$i}
									and $soldship2 != $factionships.{$i}.commander
									and $factionships.{$i}.subordinates.count lt 3
									and (not $newcommander?
										or ($soldship2.distanceto.{$factionships.{$i}} lt $soldship2.distanceto.{@$newcommander}))">
								<do_if value="$soldship2 != $factionships.{$i}
										and $soldship2 != $factionships.{$i}.commander
										and (not $newcommander?
											or ($soldship2.distanceto.{$factionships.{$i}} lt $soldship2.distanceto.{@$newcommander}))">
									<set_value name="$newcommander" exact="$factionships.{$i}"/>
								</do_if>
							</do_if>
						</do_all>
						<remove_value name="$factionships"/>
						<do_if value="@$newcommander">
							<set_object_commander object="$soldship2" commander="$newcommander" />
							<start_script object="$soldship2.pilot" name="'BR.move.escort'">
								<param name="target" value="$newcommander"/>
							</start_script>	
							<remove_value name="$newcommander"/>
						</do_if>
						<do_else>
							<start_script object="$soldship2.pilot" name="'BR.move.patrol'">
								<param name="range" value="'cluster'"/>
							</start_script>	
						</do_else>
					</do_elseif>
					<do_elseif value="$soldship2.primarypurpose == objectpurpose.fight and $soldship2.isclass.[class.ship_m, class.ship_s]">
						<find_ship name="$factionships" space="$soldship2.sector" owner="$soldship2.owner" primarypurpose="$soldship2.primarypurpose" multiple="true">
							<match_any> 
								<match class="class.ship_xl"/>
								<match class="class.ship_l"/>
								<match class="class.ship_m"/>
								<match class="class.ship_s"/>
							</match_any>
						</find_ship>
						<do_all exact="$factionships.count" counter="$i">
							<do_if value="$factionships.{$i}.isoperational
									and $soldship2 != $factionships.{$i}
									and $soldship2 != $factionships.{$i}.commander
									and $factionships.{$i}.subordinates.count lt 6
									and (not $newcommander?
										or ($soldship2.distanceto.{$factionships.{$i}} lt $soldship2.distanceto.{@$newcommander}))">
								<do_if value="$soldship2 != $factionships.{$i}
										and $soldship2 != $factionships.{$i}.commander
										and (not $newcommander?
											or ($soldship2.distanceto.{$factionships.{$i}} lt $soldship2.distanceto.{@$newcommander}))">
									<set_value name="$newcommander" exact="$factionships.{$i}"/>
								</do_if>
							</do_if>
						</do_all>
						<remove_value name="$factionships"/>
						<do_if value="@$newcommander">
							<set_object_commander object="$soldship2" commander="$newcommander" />
							<start_script object="$soldship2.pilot" name="'BR.move.escort'">
								<param name="target" value="$newcommander"/>
							</start_script>	
							<remove_value name="$newcommander"/>
						</do_if>
						<do_else>
							<start_script object="$soldship2.pilot" name="'BR.move.patrol'">
								<param name="range" value="'cluster'"/>
							</start_script>	
						</do_else>
					</do_elseif>
					<do_else>
						<start_script object="$soldship2.pilot" name="'move.die'">
							<param name="bysale" value="$actor.container" />
						</start_script>
					</do_else>
				</do_if>
				<do_elseif value="$soldship2.primarypurpose == objectpurpose.build">
					<start_script object="$soldship2.pilot" name="'move.die'" >
						<param name="bysale" value="$actor.container" />
					</start_script>
				</do_elseif>                  
				<do_elseif value="$soldship2.primarypurpose == objectpurpose.mine and $soldship2.availableunits.{unitcategory.orecollector}.count gt 0">
					<start_script object="$soldship2.pilot" name="'mining.ship.free'">
						<param name="basketoverride" value="[ware.ice, ware.ore, ware.silicon, ware.nividium]"/> 
					</start_script>
				</do_elseif>
				<do_elseif value="$soldship2.primarypurpose == objectpurpose.mine and $soldship2.isclass.[class.ship_m, class.ship_s] and $soldship2.availableunits.{unitcategory.orecollector}.count gt 0">
					<start_script object="$soldship2.pilot" name="'mining.ship.free'">
						<param name="basketoverride" value="[ware.ice, ware.ore, ware.silicon, ware.nividium]"/> 
						<param name="range" value="'cluster'"/>
					</start_script>
				</do_elseif>
				<do_elseif value="$soldship2.primarypurpose == objectpurpose.mine and $soldship2.availableunits.{unitcategory.gascollector}.count gt 0">
					<start_script object="$soldship2.pilot" name="'mining.ship.free'">
						<param name="basketoverride" value="[ware.plasma, ware.ions, ware.hydrogen]"/> 
					</start_script>					
				</do_elseif>
				<do_elseif value="$soldship2.primarypurpose == objectpurpose.mine and $soldship2.isclass.[class.ship_m, class.ship_s] and $soldship2.availableunits.{unitcategory.gascollector}.count gt 0">
					<start_script object="$soldship2.pilot" name="'mining.ship.free'">
						<param name="basketoverride" value="[ware.plasma, ware.ions, ware.hydrogen]"/>
						<param name="range" value="'cluster'"/>
					</start_script>	
				</do_elseif>
				<do_elseif value="$soldship2.primarypurpose == objectpurpose.trade">
					<start_script object="$soldship2.pilot" name="'trade.ship.ranged'">
						<param name="minbuy" value="0"/>
						<param name="maxbuy" value="20"/>
						<param name="minsell" value="0"/>
						<param name="maxsell" value="20"/>
					</start_script>
				</do_elseif>
				<do_elseif value="$soldship2.primarypurpose == objectpurpose.trade and $soldship2.isclass.[class.ship_m, class.ship_s]">
					<start_script object="$soldship2.pilot" name="'trade.ship.ranged'">
						<param name="minbuy" value="0"/>
						<param name="maxbuy" value="20"/>
						<param name="minsell" value="0"/>
						<param name="maxsell" value="20"/>
						<param name="range" value="'cluster'"/>
					</start_script>
				</do_elseif>

				<do_elseif value="$soldship2.primarypurpose == objectpurpose.fight">
					<find_ship name="$factionships" space="$soldship2.cluster" owner="$soldship2.owner" primarypurpose="$soldship2.primarypurpose" multiple="true">
						<match_any> 
							<match class="class.ship_xl"/>
							<match class="class.ship_l"/>							
						</match_any>
					</find_ship>
					<do_all exact="$factionships.count" counter="$i">
						<do_if value="$factionships.{$i}.isoperational
									and $soldship2 != $factionships.{$i}
									and $soldship2 != $factionships.{$i}.commander
									and $factionships.{$i}.subordinates.count lt 3
									and (not $newcommander?
										or ($soldship2.distanceto.{$factionships.{$i}} lt $soldship2.distanceto.{@$newcommander}))">
							<do_if value="$soldship2 != $factionships.{$i}
										and $soldship2 != $factionships.{$i}.commander
										and (not $newcommander?
											or ($soldship2.distanceto.{$factionships.{$i}} lt $soldship2.distanceto.{@$newcommander}))">
								<set_value name="$newcommander" exact="$factionships.{$i}"/>
							</do_if>
						</do_if>
					</do_all>
					<remove_value name="$factionships"/>
					<do_if value="@$newcommander">
						<set_object_commander object="$soldship2" commander="$newcommander" />
						<start_script object="$soldship2.pilot" name="'BR.move.escort'">
							<param name="target" value="$newcommander"/>
						</start_script>	
						<remove_value name="$newcommander"/>
					</do_if>
					<do_else>
						<start_script object="$soldship2.pilot" name="'BR.move.patrol'">
							<param name="range" value="'cluster'"/>
						</start_script>	
					</do_else>
				</do_elseif>
				<do_elseif value="$soldship2.primarypurpose == objectpurpose.fight and $soldship2.isclass.[class.ship_m, class.ship_s]">
					<find_ship name="$factionships" space="$soldship2.sector" owner="$soldship2.owner" primarypurpose="$soldship2.primarypurpose" multiple="true">
						<match_any> 
							<match class="class.ship_xl"/>
							<match class="class.ship_l"/>
							<match class="class.ship_m"/>
							<match class="class.ship_s"/>
						</match_any>
					</find_ship>
					<do_all exact="$factionships.count" counter="$i">
						<do_if value="$factionships.{$i}.isoperational
									and $soldship2 != $factionships.{$i}
									and $soldship2 != $factionships.{$i}.commander
									and $factionships.{$i}.subordinates.count lt 3
									and (not $newcommander?
										or ($soldship2.distanceto.{$factionships.{$i}} lt $soldship2.distanceto.{@$newcommander}))">
							<do_if value="$soldship2 != $factionships.{$i}
										and $soldship2 != $factionships.{$i}.commander
										and (not $newcommander?
											or ($soldship2.distanceto.{$factionships.{$i}} lt $soldship2.distanceto.{@$newcommander}))">
								<set_value name="$newcommander" exact="$factionships.{$i}"/>
							</do_if>
						</do_if>
					</do_all>
					<remove_value name="$factionships"/>
					<do_if value="@$newcommander">
						<set_object_commander object="$soldship2" commander="$newcommander" />
						<start_script object="$soldship2.pilot" name="'BR.move.escort'">
							<param name="target" value="$newcommander"/>
						</start_script>	
						<remove_value name="$newcommander"/>
					</do_if>
					<do_else>
						<start_script object="$soldship2.pilot" name="'BR.move.patrol'">
							<param name="range" value="'cluster'"/>
						</start_script>	
					</do_else>
				</do_elseif>
				<do_else>
					<start_script object="$soldship2.pilot" name="'move.die'">
						<param name="bysale" value="$actor.container" />
					</start_script>
				</do_else>
			</actions>
		</library>
	</add>		



	<add sel="//add_player_choice_sub[@section=&quot;g_askforway&quot;]" type="@chance" >if event.object.container.isplayerowned then 0 else 100</add>
	<add sel="//add_player_choice_sub[@section=&quot;g_askforway&quot;]" pos="after">
		<add_player_choice_sub text="'Select Ship for replication'" comment="Clone a vessel" position="top_right" section="cArch_selectsomething" choiceparam="[0, 0, 'zone', event.object.container.zone, null, null, 'selectplayerobject', ['cArch_buildclone', null, null, true, false, true, false, true]]" chance="if event.object.container.isplayerowned then 100 else 0" />
	</add>

	<add sel="/mdscript[@name='NPC_Shiptrader']/cues/cue[@name='Base']/cues/cue[@name='SectionHandler']/actions/do_elseif[@value=&quot;event.param == 'cArch_repairslider'&quot;]" pos="after">
            <do_elseif value="event.param == 'cArch_selectsomething'">
				<open_conversation_menu menu="MapMenu" param="event.param2" param2="event.param3" />
				<add_conversation_view view="closeupdetailmonitor" />
            </do_elseif>
	</add>
	<add sel="/mdscript[@name='NPC_Shiptrader']/cues/cue[@name='Base']/cues/cue[@name='SectionHandler']/actions/do_elseif[@value=&quot;event.param == 'cArch_repairslider'&quot;]" pos="after">
            <do_elseif value="event.param == 'cArch_buildclone' and event.param2.{3}? and event.param2.{3}.exists">
				<add_player_choice text="'select [ %1 ]'.[event.param2.{3}.macro.name]" selectable="$BuildModule.buildmacros.{1}.class == event.param2.{3}.class" comment="build a vessel" section="cArch_selectUpgradesMenu" choiceparam="[ 0, 0, $actor, $BuildModule, null, event.param2.{3}.macro.id, '', 0, 1, $WareList ]" />
				<add_player_choice_return text="{1002,20}" position="bottom_right" comment="Back" />
           </do_elseif>
	</add>

</diff>
